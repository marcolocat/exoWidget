{"mappings":"AAAA,a,48CAIMA,eAAiB,WACrB,OAAO,IAAIC,SAAQ,SAACC,EAAKC,G,OACvBC,UAAUC,YAAYC,mBAAmBJ,EAAKC,E,GAElD,EAIMI,YAAA,W,MAAcC,mBAAA,W,IACZC,E,4DAAW,O,EAAMT,kB,OACvB,O,EAAO,CACLU,KAFID,EAAWE,EAAAC,QAEDC,OAAOC,SACrBC,KAAMN,EAASI,OAAOG,Y,GAE1B,I,kDANM,GAUAC,cAAgB,SAACC,EAAKC,GAC1BC,SAASC,cAAc,QAAQC,YAAc,GAAOC,OAAJL,EAAI,MACpDE,SAASC,cAAc,QAAQC,YAAc,GAAOC,OAAJJ,EAAI,KAEtD,EAKMK,iBAAmB,SAACC,GACxB,IACMC,EADmBD,EAAjBE,aACwBC,KAAI,SAACC,GACnC,IAAMC,EAAO,IAAIC,KAAKF,EAAGG,KAAKC,WACxBC,EAAQJ,EAAKK,WACbC,EAAUN,EAAKO,aACfC,EAAiBR,EAAKK,WAAa,GAAK,IAAMD,EAAQA,EACtDK,EAAmBT,EAAKO,aAAe,GAAK,IAAMD,EAAUA,EAClE,MAAO,CACLH,UAAW,GAAqBV,OAAlBe,EAAe,KAAoBf,OAAjBgB,GAChCC,YAAaX,EAAGY,GAChBC,SAAUb,EAAGa,SAEjB,IACA,MAAO,CACLC,QAASlB,EAAQkB,QAAQC,KACzBlB,aAEJ,EAIMmB,YAAc,SAACC,GACnB,IAAMC,EAAQ3B,SAASC,cAAc,eAC/B2B,EAAO,8CAGgCzB,OADnBuB,EAAMb,UAAU,yDACsBV,OAAnBuB,EAAMJ,SAAS,MAC3BnB,OAD+BuB,EAAMJ,SAAS,6CAC5BnB,OAAlBuB,EAAMN,YAAY,gCAGnDO,EAAME,mBAAmB,YAAaD,EAExC,EAIME,kBAAoB,SAACP,GACFvB,SAASC,cAAc,wBAC/BC,YAAcqB,CAC/B,EAKMQ,wBAA0B,WAC9B5C,cAAc6C,MAAK,SAAClD,GAClBmD,QAAQC,IAAIpD,EACd,GACF,EAEAiD","sources":["starter/app.js"],"sourcesContent":["\"use strict\";\n\n// getCoordinates()\n// Demande au navigateur de détecter la position actuelle de l'utilisateur et retourne une Promise\nconst getCoordinates = () => {\n  return new Promise((res, rej) =>\n    navigator.geolocation.getCurrentPosition(res, rej)\n  );\n};\n\n// getPosition()\n// Résout la promesse de getCoordinates et retourne un objet {lat: x, long: y}\nconst getPosition = async () => {\n  const position = await getCoordinates();\n  return {\n    lat: position.coords.latitude,\n    long: position.coords.longitude\n  };\n};\n\n// renderWeather(min, max)\n// Affiche la valeu des deux paramêtres dans le widget de météo\nconst renderWeather = (min, max) => {\n  document.querySelector(\".min\").textContent = `${min}°C`;\n  document.querySelector(\".max\").textContent = `${max}°C`;\n  return;\n};\n\n// parseStationData(rawData)\n// Reçoit la réponse JSON de l'API Transport/stationboard et recrache un objet\n// ne contenant que les informations pertinentes.\nconst parseStationData = (rawData) => {\n  const { stationboard } = rawData;\n  const departures = stationboard.map((el) => {\n    const date = new Date(el.stop.departure);\n    const hours = date.getHours();\n    const minutes = date.getMinutes();\n    const formattedHours = date.getHours() < 10 ? \"0\" + hours : hours;\n    const formattedMinutes = date.getMinutes() < 10 ? \"0\" + minutes : minutes;\n    return {\n      departure: `${formattedHours}:${formattedMinutes}`,\n      destination: el.to,\n      category: el.category\n    };\n  });\n  return {\n    station: rawData.station.name,\n    departures\n  };\n};\n\n// renderTrain(train)\n// Affiche une ligne de départ dans le widget CFF.\nconst renderTrain = (train) => {\n  const board = document.querySelector(\".departures\");\n  const html = `\n    <article>\n        <div class=\"time\">${train.departure}</div>\n        <div class=\"category\" data-category=\"${train.category}\">${train.category}</div>\n        <div class=\"destination\">${train.destination}</div>\n    </article>\n    `;\n  board.insertAdjacentHTML(\"beforeend\", html);\n  return;\n};\n\n// renderStationName(station)\n// Affiche le mot passé en paramettre dans le widget CFF. \nconst renderStationName = (station) => {\n  const stationElement = document.querySelector(\".departures header p\");\n  stationElement.textContent = station;\n};\n\n// Votre code peut se trouver dans cette fonction. L'appel vers getPosition est\n// déjà implémenté. Si vous jetez un coup d'oeil à votre console vous verrez un objet\n// contenant votre position.\nconst getDashboardInformation = () => {\n  getPosition().then((res) => {\n    console.log(res);\n  });\n};\n\ngetDashboardInformation();\n"],"names":["getCoordinates","Promise","res","rej","navigator","geolocation","getCurrentPosition","getPosition","_asyncToGenerator","position","lat","_state","sent","coords","latitude","long","longitude","renderWeather","min","max","document","querySelector","textContent","concat","parseStationData","rawData","departures","stationboard","map","el","date","Date","stop","departure","hours","getHours","minutes","getMinutes","formattedHours","formattedMinutes","destination","to","category","station","name","renderTrain","train","board","html","insertAdjacentHTML","renderStationName","getDashboardInformation","then","console","log"],"version":3,"file":"index.1f2e7804.js.map"}